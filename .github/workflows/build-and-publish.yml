name: Build and Publish

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install
      
      - name: Lint
        run: bun run lint
      
      - name: Test
        run: bun test

  build-linux:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install
      
      - name: Build
        run: bun run build
      
      - name: Build CLI
        run: bun run build:cli
      
      - name: Create Linux package (DEB)
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          mkdir -p britescript_${VERSION}_amd64/DEBIAN
          mkdir -p britescript_${VERSION}_amd64/usr/bin
          mkdir -p britescript_${VERSION}_amd64/usr/share/doc/britescript
          
          # Copy executable
          cp dist/brite britescript_${VERSION}_amd64/usr/bin/
          chmod 755 britescript_${VERSION}_amd64/usr/bin/brite
          
          # Copy documentation
          cp README.md LICENSE britescript_${VERSION}_amd64/usr/share/doc/britescript/
          
          # Create control file
          cat > britescript_${VERSION}_amd64/DEBIAN/control << EOF
          Package: britescript
          Version: ${VERSION}
          Section: development
          Priority: optional
          Architecture: amd64
          Depends: bun
          Maintainer: Britescript Team <info@britescript.dev>
          Description: A language that compiles to TypeScript with traits, structs, and pipes
           Britescript is a modern programming language that compiles to TypeScript,
           featuring traits, structs, and functional programming concepts.
          EOF
          
          # Build the package
          dpkg-deb --build britescript_${VERSION}_amd64
          
          # Rename for clarity
          mv britescript_${VERSION}_amd64.deb britescript-${VERSION}-linux-amd64.deb
      
      - name: Create Linux package (RPM)
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          # Install rpm tools
          sudo apt-get update
          sudo apt-get install -y rpm
          
          VERSION=${GITHUB_REF#refs/tags/v}
          mkdir -p britescript-rpm/usr/bin
          mkdir -p britescript-rpm/usr/share/doc/britescript
          
          # Copy executable
          cp dist/brite britescript-rpm/usr/bin/
          chmod 755 britescript-rpm/usr/bin/brite
          
          # Copy documentation
          cp README.md LICENSE britescript-rpm/usr/share/doc/britescript/
          
          # Create spec file
          cat > britescript.spec << EOF
          Name: britescript
          Version: ${VERSION}
          Release: 1
          Summary: A language that compiles to TypeScript
          License: MIT
          
          %description
          Britescript is a modern programming language that compiles to TypeScript,
          featuring traits, structs, and functional programming concepts.
          
          %files
          %defattr(-,root,root)
          /usr/bin/brite
          /usr/share/doc/britescript/*
          EOF
          
          # Build the package
          rpmbuild -bb \
            --buildroot $(pwd)/britescript-rpm \
            --define "_rpmdir $(pwd)" \
            --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" \
            britescript.spec
          
          # Move to current directory
          find . -name "*.rpm" -exec mv {} britescript-${VERSION}-linux.rpm \;
      
      - name: Create Linux tarball
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          mkdir -p britescript-${VERSION}-linux
          cp -r dist/* britescript-${VERSION}-linux/
          cp README.md LICENSE britescript-${VERSION}-linux/
          tar -czf britescript-${VERSION}-linux.tar.gz britescript-${VERSION}-linux
      
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linux-artifacts
          path: |
            dist/
            *.deb
            *.rpm
            *.tar.gz
          retention-days: 7

  build-macos:
    needs: test
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install
      
      - name: Build
        run: bun run build
      
      - name: Build CLI
        run: bun run build:cli
      
      - name: Create macOS package
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          
          # Create directory structure for pkg
          mkdir -p britescript-pkg/usr/local/bin
          mkdir -p britescript-pkg/usr/local/share/doc/britescript
          
          # Copy files
          cp dist/brite britescript-pkg/usr/local/bin/
          chmod 755 britescript-pkg/usr/local/bin/brite
          cp README.md LICENSE britescript-pkg/usr/local/share/doc/britescript/
          
          # Create component plist
          mkdir -p scripts
          cat > scripts/component.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>BundleIsRelocatable</key>
              <false/>
              <key>BundleIsVersionChecked</key>
              <true/>
              <key>BundleOverwriteAction</key>
              <string>upgrade</string>
              <key>RootRelativeBundlePath</key>
              <string>usr/local</string>
          </dict>
          </plist>
          EOF
          
          # Create distribution.xml
          cat > scripts/distribution.xml << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <installer-gui-script minSpecVersion="1">
              <title>Britescript</title>
              <organization>dev.britescript</organization>
              <domains enable_localSystem="true"/>
              <options customize="never" require-scripts="false"/>
              <welcome file="welcome.html" mime-type="text/html"/>
              <license file="license.html" mime-type="text/html"/>
              <conclusion file="conclusion.html" mime-type="text/html"/>
              <pkg-ref id="dev.britescript.pkg"/>
              <choices-outline>
                  <line choice="default">
                      <line choice="dev.britescript.pkg"/>
                  </line>
              </choices-outline>
              <choice id="default"/>
              <choice id="dev.britescript.pkg" visible="false">
                  <pkg-ref id="dev.britescript.pkg"/>
              </choice>
              <pkg-ref id="dev.britescript.pkg" version="${VERSION}" onConclusion="none">britescript.pkg</pkg-ref>
          </installer-gui-script>
          EOF
          
          # Create HTML files
          mkdir -p resources
          cat > resources/welcome.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
              <title>Welcome to Britescript</title>
          </head>
          <body>
              <h1>Welcome to Britescript ${VERSION}</h1>
              <p>Britescript is a modern programming language that compiles to TypeScript, featuring traits, structs, and functional programming concepts.</p>
          </body>
          </html>
          EOF
          
          cat > resources/license.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
              <title>Britescript License</title>
          </head>
          <body>
              <h1>MIT License</h1>
              <pre>$(cat LICENSE)</pre>
          </body>
          </html>
          EOF
          
          cat > resources/conclusion.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
              <title>Installation Complete</title>
          </head>
          <body>
              <h1>Installation Complete</h1>
              <p>Britescript has been successfully installed. You can now use the 'brite' command in your terminal.</p>
          </body>
          </html>
          EOF
          
          # Build component package
          pkgbuild --root britescript-pkg \
                  --identifier dev.britescript.pkg \
                  --version ${VERSION} \
                  --install-location / \
                  --component-plist scripts/component.plist \
                  britescript.pkg
          
          # Build product archive
          productbuild --distribution scripts/distribution.xml \
                      --resources resources \
                      --package-path britescript.pkg \
                      britescript-${VERSION}-macos.pkg
      
      - name: Create macOS tarball
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          mkdir -p britescript-${VERSION}-macos
          cp -r dist/* britescript-${VERSION}-macos/
          cp README.md LICENSE britescript-${VERSION}-macos/
          tar -czf britescript-${VERSION}-macos.tar.gz britescript-${VERSION}-macos
      
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v3
        with:
          name: macos-artifacts
          path: |
            dist/
            *.pkg
            *.tar.gz
          retention-days: 7

  build-windows:
    needs: test
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install
      
      - name: Build
        run: bun run build
      
      - name: Build CLI
        run: bun run build:cli
      
      - name: Install NSIS
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          choco install nsis -y
          echo "C:\Program Files (x86)\NSIS" >> $env:GITHUB_PATH
      
      - name: Create Windows installer
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          $VERSION = $env:GITHUB_REF -replace 'refs/tags/v', ''
          
          # Create NSIS script
          @"
          !include "MUI2.nsh"
          
          Name "Britescript"
          OutFile "britescript-${VERSION}-windows.exe"
          InstallDir "$PROGRAMFILES\Britescript"
          RequestExecutionLevel admin
          
          !define MUI_ICON "dist\icon.ico"
          !define MUI_UNICON "dist\icon.ico"
          
          !define MUI_WELCOMEPAGE_TITLE "Welcome to Britescript ${VERSION}"
          !define MUI_WELCOMEPAGE_TEXT "This will install Britescript ${VERSION} on your computer.$\r$\n$\r$\nBritescript is a modern programming language that compiles to TypeScript, featuring traits, structs, and functional programming concepts."
          
          !insertmacro MUI_PAGE_WELCOME
          !insertmacro MUI_PAGE_LICENSE "LICENSE"
          !insertmacro MUI_PAGE_DIRECTORY
          !insertmacro MUI_PAGE_INSTFILES
          !insertmacro MUI_PAGE_FINISH
          
          !insertmacro MUI_UNPAGE_CONFIRM
          !insertmacro MUI_UNPAGE_INSTFILES
          
          !insertmacro MUI_LANGUAGE "English"
          
          Section "Install"
            SetOutPath "$INSTDIR"
            
            # Create icon if it doesn't exist
            !system 'if not exist "dist\icon.ico" copy "C:\Program Files (x86)\NSIS\Contrib\Graphics\Icons\nsis3-install.ico" "dist\icon.ico"'
            
            # Copy files
            File /r "dist\*.*"
            File "LICENSE"
            File "README.md"
            
            # Create uninstaller
            WriteUninstaller "$INSTDIR\uninstall.exe"
            
            # Add to PATH
            EnVar::SetHKCU
            EnVar::AddValue "PATH" "$INSTDIR"
            
            # Create Start Menu shortcuts
            CreateDirectory "$SMPROGRAMS\Britescript"
            CreateShortcut "$SMPROGRAMS\Britescript\Britescript.lnk" "$INSTDIR\brite.cmd" "" "$INSTDIR\icon.ico"
            CreateShortcut "$SMPROGRAMS\Britescript\Uninstall.lnk" "$INSTDIR\uninstall.exe"
            
            # Create .cmd wrapper for brite
            FileOpen $0 "$INSTDIR\brite.cmd" w
            FileWrite $0 "@echo off$\r$\nbun $INSTDIR\brite %*"
            FileClose $0
            
            # Create registry entries
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\Britescript" "DisplayName" "Britescript"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\Britescript" "UninstallString" "$\"$INSTDIR\uninstall.exe$\""
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\Britescript" "DisplayVersion" "${VERSION}"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\Britescript" "Publisher" "Britescript Team"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\Britescript" "DisplayIcon" "$INSTDIR\icon.ico"
          SectionEnd
          
          Section "Uninstall"
            # Remove files
            RMDir /r "$INSTDIR"
            
            # Remove Start Menu shortcuts
            RMDir /r "$SMPROGRAMS\Britescript"
            
            # Remove from PATH
            EnVar::SetHKCU
            EnVar::DeleteValue "PATH" "$INSTDIR"
            
            # Remove registry entries
            DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\Britescript"
          SectionEnd
          "@ | Out-File -Encoding utf8 installer.nsi
          
          # Create a placeholder icon if it doesn't exist
          if (-not (Test-Path "dist\icon.ico")) {
            New-Item -ItemType Directory -Force -Path "dist"
            Copy-Item "C:\Program Files (x86)\NSIS\Contrib\Graphics\Icons\nsis3-install.ico" "dist\icon.ico"
          }
          
          # Build the installer
          & 'C:\Program Files (x86)\NSIS\makensis.exe' installer.nsi
      
      - name: Create Windows ZIP
        run: |
          $VERSION = $env:GITHUB_REF -replace 'refs/tags/v', ''
          New-Item -ItemType Directory -Force -Path "britescript-${VERSION}-windows"
          Copy-Item -Path "dist\*" -Destination "britescript-${VERSION}-windows" -Recurse
          Copy-Item -Path "README.md","LICENSE" -Destination "britescript-${VERSION}-windows"
          
          # Create .cmd wrapper for brite
          @"
          @echo off
          bun %~dp0\brite %*
          "@ | Out-File -Encoding ascii "britescript-${VERSION}-windows\brite.cmd"
          
          Compress-Archive -Path "britescript-${VERSION}-windows\*" -DestinationPath "britescript-${VERSION}-windows.zip"
      
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-artifacts
          path: |
            dist/
            *.exe
            *.zip
          retention-days: 7

  publish-install-scripts:
    needs: [build-linux, build-macos, build-windows]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup GitHub Pages
        uses: actions/configure-pages@v3
      
      - name: Create install scripts directory
        run: mkdir -p public
      
      - name: Copy installation scripts
        run: |
          cp scripts/install.sh public/install
          cp scripts/install.ps1 public/install.ps1
          cp scripts/install.html public/index.html
          cp scripts/CNAME public/CNAME
      
      - name: Upload installation scripts
        uses: actions/upload-pages-artifact@v2
        with:
          path: public
      
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  publish-homebrew:
    needs: build-macos
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Download macOS artifacts
        uses: actions/download-artifact@v3
        with:
          name: macos-artifacts
          path: artifacts/macos
      
      - name: Create Homebrew formula
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          
          # Create Homebrew formula
          cat > britescript.rb << EOF
          class Britescript < Formula
            desc "A language that compiles to TypeScript with traits, structs, and pipes"
            homepage "https://britescript.dev"
            url "https://github.com/britescript/britescript/releases/download/v${VERSION}/britescript-${VERSION}-macos.tar.gz"
            sha256 "$(sha256sum artifacts/macos/britescript-${VERSION}-macos.tar.gz | cut -d ' ' -f 1)"
            license "MIT"
            
            depends_on "bun"
            
            def install
              bin.install "brite"
            end
            
            test do
              system "#{bin}/brite", "--version"
            end
          end
          EOF
      
      - name: Create Pull Request to Homebrew
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Add britescript v${{ github.ref_name }}"
          title: "Add britescript v${{ github.ref_name }}"
          body: |
            This PR adds the Britescript formula for version ${{ github.ref_name }}.
            
            Britescript is a language that compiles to TypeScript with traits, structs, and pipes.
          branch: britescript-formula-${{ github.ref_name }}
          path: britescript.rb
          base: main

  create-release:
    needs: [build-linux, build-macos, build-windows, publish-install-scripts, publish-homebrew]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      
      - name: Prepare release files
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          mkdir -p release
          
          # Copy all installer files to release directory
          find artifacts -name "*.deb" -o -name "*.rpm" -o -name "*.pkg" -o -name "*.exe" -o -name "*.tar.gz" -o -name "*.zip" | xargs -I{} cp {} release/
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          body: |
            # Britescript v${{ github.ref_name }}
            
            ## Quick Installation
            
            ### macOS/Linux
            ```bash
            curl -fsSL https://install.britescript.dev/install | bash
            ```
            
            ### Windows
            ```powershell
            irm install.britescript.dev/install.ps1 | iex
            ```
            
            ### Homebrew (macOS/Linux)
            ```bash
            brew install britescript
            ```
            
            ### Docker
            ```bash
            docker pull britescript/britescript:latest
            docker run -it --rm -v $(pwd):/app britescript/britescript
            ```
            
            ## Manual Installation
            
            ### macOS
            Download the .pkg installer or .tar.gz archive from this release.
            
            ### Linux
            Download the appropriate .deb, .rpm package, or .tar.gz archive for your distribution.
            
            ### Windows
            Download and run the Windows installer (.exe) or extract the .zip archive from this release.
            
            ## Requirements
            
            Britescript requires [Bun](https://bun.sh) to run. The installer will offer to install Bun if it's not already installed.
            
            ## Changes in this release
            
            <!-- Add release notes here -->
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}